import java.io.*;
import java.util.*;

// ---------- Student class (for Serialization) ----------
class Student implements Serializable {
    int studentID;
    String name;
    double grade;

    public Student(int studentID, String name, double grade) {
        this.studentID = studentID;
        this.name = name;
        this.grade = grade;
    }

    public void display() {
        System.out.println("Student ID: " + studentID);
        System.out.println("Name: " + name);
        System.out.println("Grade: " + grade);
    }
}

// ---------- Employee class ----------
class Employee {
    int id;
    String name, designation;
    double salary;

    public Employee(int id, String name, String designation, double salary) {
        this.id = id;
        this.name = name;
        this.designation = designation;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return id + "," + name + "," + designation + "," + salary;
    }

    public static Employee fromString(String line) {
        String[] parts = line.split(",");
        return new Employee(Integer.parseInt(parts[0]), parts[1], parts[2], Double.parseDouble(parts[3]));
    }

    public void display() {
        System.out.println("ID: " + id + ", Name: " + name + ", Designation: " + designation + ", Salary: " + salary);
    }
}

// ---------- Main Class ----------
public class CombinedProgram {
    static Scanner sc = new Scanner(System.in);
    static final String EMP_FILE = "employees.txt";
    static final String STUD_FILE = "student.ser";

    public static void main(String[] args) {
        int choice;
        do {
            System.out.println("\n=== Menu ===");
            System.out.println("1. Sum Integers (Autoboxing)");
            System.out.println("2. Serialize & Deserialize Student");
            System.out.println("3. Add Employee");
            System.out.println("4. Show All Employees");
            System.out.println("5. Exit");
            System.out.print("Enter choice: ");
            choice = Integer.parseInt(sc.nextLine());

            switch (choice) {
                case 1 -> sumIntegers();
                case 2 -> serializeStudent();
                case 3 -> addEmployee();
                case 4 -> showEmployees();
                case 5 -> System.out.println("Exiting...");
                default -> System.out.println("Invalid choice.");
            }
        } while (choice != 5);
    }

    // --- Part A: Autoboxing / Unboxing ---
    static void sumIntegers() {
        List<Integer> numbers = new ArrayList<>();
        System.out.println("Enter integers (type 'done' to finish):");
        while (true) {
            String input = sc.nextLine();
            if (input.equalsIgnoreCase("done")) break;
            try {
                int num = Integer.parseInt(input);
                numbers.add(num); // Autoboxing
            } catch (NumberFormatException e) {
                System.out.println("Invalid input.");
            }
        }
        int sum = 0;
        for (Integer num : numbers) sum += num; // Unboxing
        System.out.println("Sum = " + sum);
    }

    // --- Part B: Serialization ---
    static void serializeStudent() {
        try {
            Student s1 = new Student(101, "Alice", 90.5);
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(STUD_FILE));
            oos.writeObject(s1);
            oos.close();
            System.out.println("Student serialized.");

            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(STUD_FILE));
            Student s2 = (Student) ois.readObject();
            ois.close();
            System.out.println("Deserialized Student:");
            s2.display();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error: " + e);
        }
    }

    // --- Part C: Add Employee ---
    static void addEmployee() {
        try {
            System.out.print("Enter ID: ");
            int id = Integer.parseInt(sc.nextLine());
            System.out.print("Enter Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Designation: ");
            String desg = sc.nextLine();
            System.out.print("Enter Salary: ");
            double salary = Double.parseDouble(sc.nextLine());

            Employee emp = new Employee(id, name, desg, salary);
            BufferedWriter bw = new BufferedWriter(new FileWriter(EMP_FILE, true));
            bw.write(emp.toString());
            bw.newLine();
            bw.close();
            System.out.println("Employee added.");
        } catch (IOException | NumberFormatException e) {
            System.out.println("Error: " + e);
        }
    }

    // --- Part C: Display Employees ---
    static void showEmployees() {
        try (BufferedReader br = new BufferedReader(new FileReader(EMP_FILE))) {
            String line;
            System.out.println("\n--- Employee Records ---");
            while ((line = br.readLine()) != null) {
                Employee emp = Employee.fromString(line);
                emp.display();
            }
        } catch (IOException e) {
            System.out.println("No employees found or error reading file.");
        }
    }
}
